\`\`\`typescript
// app/layout.tsx
import type { Metadata } from 'next'
import { GeistSans } from 'geist/font/sans'
import { GeistMono } from 'geist/font/mono'
import './globals.css'
import AppHeader from '@/components/app-header'

export const metadata: Metadata = {
  title: 'BM Microcredits',
  description: 'Gestión de microcréditos',
  generator: 'v0.dev',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="es">
      <head>
        <style>{`
  html {
    font-family: ${GeistSans.style.fontFamily};
    --font-sans: ${GeistSans.variable};
    --font-mono: ${GeistMono.variable};
  }
          `}</style>
      </head>
      <body className="min-h-screen bg-gray-50 text-gray-900">
        <AppHeader />
        <main className="min-h-[calc(100vh-56px)]">{children}</main>
      </body>
    </html>
  )
}
\`\`\`

\`\`\`typescript
// app/dashboard/reports/page.tsx
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { useDashboard } from "@/hooks/use-dashboard"
import { useEffect, useState } from "react"
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"
import { Button } from "@/components/ui/button";
import { Printer } from 'lucide-react'

interface ReportData {
  name: string
  value: number
}

export default function ReportsPage() {
  const { totalClients, totalLoans, totalPayments } = useDashboard()
  const [reportData, setReportData] = useState<ReportData[]>([])

  useEffect(() => {
    setReportData([
      { name: "Clientes", value: totalClients },
      { name: "Préstamos", value: totalLoans },
      { name: "Pagos", value: totalPayments },
    ])
  }, [totalClients, totalLoans, totalPayments])

  return (
    <div className="space-y-4">
      <div className="px-4 flex justify-end">
        <Button onClick={() => window.print()} className="no-print bg-gray-800 hover:bg-gray-900 text-white">
          <Printer className="mr-2 h-4 w-4" />
          Imprimir PDF
        </Button>
      </div>
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-gray-50">Informe de situación Financiera</CardTitle>
          <CardDescription className="text-gray-400">
            Resumen general de la actividad financiera.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={reportData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" stroke="#8884d8" />
              <YAxis stroke="#8884d8" />
              <Tooltip wrapperStyle={{ width: 100, backgroundColor: "#333" }} />
              <Legend width={100} wrapperStyle={{ top: 40, right: 20, backgroundColor: "#f5f5f5", border: "1px solid #d5d5d5", borderRadius: 3, lineHeight: "40px" }} />
              <Bar dataKey="value" fill="#8884d8" barSize={30} />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
      <style jsx global>{`
      @media print {
        body { background: white !important; color: #111827 !important; }
        .site-header, .no-print { display: none !important; }
        .bg-gray-800, .bg-gray-700 { background: white !important; }
        .text-gray-50, .text-gray-100, .text-gray-300, .text-gray-400 { color: #111827 !important; }
        .border-gray-700, .border-gray-600 { border-color: #e5e7eb !important; }
        a::after { content: "" !important; }
        @page { margin: 16mm; }
      }
    `}</style>
    </div>
  )
}
\`\`\`

\`\`\`typescript
// app/dashboard/loans/new-loan-form.tsx
"use client"

import { useEffect, useState } from "react"
import { useFormStatus } from "react-dom"
import { toast } from "sonner"
import { useRouter } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { CalendarIcon } from 'lucide-react'
import { cn } from "@/lib/utils"
import { format } from "date-fns"
import { DatePicker } from "@/components/date-picker"

interface ClientInfo {
  id: string
  first_name: string
  last_name: string
  client_code: string
}

interface FormErrors {
  client_id?: string
  amount?: string
  amount_to_repay?: string
  installments?: string
  loan_type?: string
  start_date?: string
  end_date?: string
}

const initialFormData = {
  client_id: "",
  amount: 0,
  amount_to_repay: 0,
  installments: 1,
  loan_type: "Semanal",
  start_date: new Date().toISOString().split("T")[0],
  end_date: "",
  status: "activo",
}

interface NewLoanFormProps {
  clients: ClientInfo[]
  onSuccess: () => void
}

export function NewLoanForm({ clients, onSuccess }: NewLoanFormProps) {
  const [formData, setFormData] = useState(initialFormData)
  const [errors, setErrors] = useState<FormErrors>({})
  const [loading, setLoading] = useState(false)
  const router = useRouter()

  useEffect(() => {
    setFormData(initialFormData)
    setErrors({})
  }, [clients])

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {}
    if (!formData.client_id) newErrors.client_id = "Debes seleccionar un cliente."
    if (formData.amount <= 0) newErrors.amount = "El monto debe ser mayor que cero."
    if (formData.installments <= 0 || !Number.isInteger(formData.installments)) {
      newErrors.installments = "El número de cuotas debe ser un entero positivo."
    }
    if (formData.amount_to_repay <= 0) {
      newErrors.amount_to_repay = "El monto a devolver debe ser mayor que cero."
    } else if (formData.amount > 0 && formData.amount_to_repay < formData.amount) {
      newErrors.amount_to_repay = "El monto a devolver no puede ser menor que el monto."
    }
    if (!formData.start_date) newErrors.start_date = "La fecha de inicio es obligatoria."
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: type === "number" ? parseFloat(value) : value,
    }))
    if (errors[name as keyof FormErrors]) {
      setErrors((prev) => ({ ...prev, [name]: undefined }))
    }
  }

  function handleSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
    if (errors[name as keyof FormErrors]) setErrors((prev) => ({ ...prev, [name]: undefined }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!validateForm()) {
      toast({
        title: "Error de validación",
        description: "Por favor, corrige los errores en el formulario.",
        variant: "destructive",
      })
      return
    }
    setLoading(true)
    try {
      const { amount, amount_to_repay } = formData
      const interest_rate = amount > 0 ? ((amount_to_repay / amount) - 1) * 100 : 0

      const payload = {
        client_id: formData.client_id,
        amount: formData.amount,
        installments: formData.installments,
        loan_type: formData.loan_type,
        // Campo calculado:
        interest_rate: Number.isFinite(interest_rate) ? Number(interest_rate.toFixed(4)) : 0,
        start_date: formData.start_date,
        end_date: formData.end_date || null,
        status: formData.status,
        // Enviamos amount_to_repay por si el backend lo soporta (no rompe si lo ignora):
        amount_to_repay: formData.amount_to_repay,
      }

      const response = await fetch("/api/loans", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => null)
        throw new Error(errorData?.detail || "Error al crear el préstamo.")
      }

      toast({ title: "Éxito", description: "Préstamo creado correctamente." })
      onSuccess()
    } catch (error: any) {
      toast({ title: "Error", description: error.message, variant: "destructive" })
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="client_id" className="text-right text-gray-300 pt-2">
          Cliente
        </Label>
        <select
          id="client_id"
          name="client_id"
          value={formData.client_id}
          onChange={handleChange}
          className="w-full rounded-md bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2"
        >
          <option value="">Selecciona un cliente</option>
          {clients.map((client) => (
            <option key={client.id} value={client.id}>
              {client.first_name} {client.last_name} ({client.client_code})
            </option>
          ))}
        </select>
        {errors.client_id && <p className="text-red-500 text-xs mt-1">{errors.client_id}</p>}
      </div>

      <div className="grid grid-cols-4 items-start gap-4">
        <Label htmlFor="amount" className="text-right text-gray-300 pt-2">
          Monto del préstamo
        </Label>
        <div className="col-span-3">
          <Input
            id="amount"
            name="amount"
            type="number"
            step="0.01"
            value={formData.amount}
            onChange={handleChange}
            className="bg-gray-700 border-gray-600 text-gray-100"
            required
          />
          {errors.amount && <p className="text-red-500 text-xs mt-1">{errors.amount}</p>}
        </div>
      </div>

      <div className="grid grid-cols-4 items-start gap-4">
        <Label htmlFor="amount_to_repay" className="text-right text-gray-300 pt-2">
          Monto a devolver
        </Label>
        <div className="col-span-3">
          <Input
            id="amount_to_repay"
            name="amount_to_repay"
            type="number"
            step="0.01"
            value={formData.amount_to_repay}
            onChange={handleChange}
            className="bg-gray-700 border-gray-600 text-gray-100"
            required
          />
          {errors.amount_to_repay && <p className="text-red-500 text-xs mt-1">{errors.amount_to_repay}</p>}
        </div>
      </div>

      <div className="grid grid-cols-4 items-start gap-4">
        <Label htmlFor="installments" className="text-right text-gray-300 pt-2">
          Número de cuotas
        </Label>
        <div className="col-span-3">
          <Input
            id="installments"
            name="installments"
            type="number"
            value={formData.installments}
            onChange={handleChange}
            className="bg-gray-700 border-gray-600 text-gray-100"
            required
          />
          {errors.installments && <p className="text-red-500 text-xs mt-1">{errors.installments}</p>}
        </div>
      </div>

      <div className="grid grid-cols-4 items-start gap-4">
        <Label htmlFor="loan_type" className="text-right text-gray-300 pt-2">
          Tipo de préstamo
        </Label>
        <div className="col-span-3">
          <select
            id="loan_type"
            name="loan_type"
            value={formData.loan_type}
            onChange={handleSelectChange}
            className="w-full rounded-md bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2"
          >
            <option value="Semanal">Semanal</option>
            <option value="Quincenal">Quincenal</option>
            <option value="Mensual">Mensual</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-4 items-start gap-4">
        <Label htmlFor="start_date" className="text-right text-gray-300 pt-2">
          Fecha de inicio
        </Label>
        <div className="col-span-3">
          <DatePicker
            id="start_date"
            name="start_date"
            value={formData.start_date ? new Date(formData.start_date) : undefined}
            onChange={(date) => {
              const formattedDate = date ? format(date, "yyyy-MM-dd") : "";
              setFormData((prev) => ({ ...prev, start_date: formattedDate }));
              if (errors.start_date) {
                setErrors((prev) => ({ ...prev, start_date: undefined }));
              }
            }}
          />
          {errors.start_date && <p className="text-red-500 text-xs mt-1">{errors.start_date}</p>}
        </div>
      </div>

      <Button type="submit" disabled={loading}>
        {loading ? "Creando..." : "Crear Préstamo"}
      </Button>
    </form>
  )
}
\`\`\`

\`\`\`typescript
// app/dashboard/loans/page.tsx
"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { toast } from "sonner"
import { MoreHorizontal, Edit, Trash, Printer } from 'lucide-react'

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { NewLoanForm } from "./new-loan-form"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"

interface ClientInfo {
  id: string
  first_name: string
  last_name: string
  client_code: string
}

interface Loan {
  id: string
  loan_code: string
  client_id: string
  amount: number
  interest_rate: number | null
  installments: number
  loan_type: string | null
  start_date: string | null
  end_date: string | null
  status: string
  created_at: string
  updated_at: string
  clients?: ClientInfo | null
}

function getAmountToRepay(loan: Loan & { amount_to_repay?: number | null }) {
  if (loan && typeof (loan as any).amount_to_repay === "number" && (loan as any).amount_to_repay! > 0) {
    return (loan as any).amount_to_repay as number
  }
  if (loan.interest_rate != null) {
    return loan.amount * (1 + (loan.interest_rate || 0) / 100)
  }
  return loan.amount
}

function getCalculatedRate(loan: Loan & { amount_to_repay?: number | null }) {
  const total = getAmountToRepay(loan)
  if (loan.amount > 0) {
    const r = ((total / loan.amount) - 1) * 100
    return Number.isFinite(r) ? r : 0
  }
  return 0
}

function formatDate(d: Date) {
  const dd = String(d.getDate()).padStart(2, "0")
  const mm = String(d.getMonth() + 1).padStart(2, "0")
  const yyyy = d.getFullYear()
  return `${dd}/${mm}/${yyyy}`
}

function addDays(date: Date, days: number) {
  const d = new Date(date)
  d.setDate(d.getDate() + days)
  return d
}

function intervalDaysFor(type?: string | null) {
  switch ((type || "").toLowerCase()) {
    case "semanal": return 7
    case "quincenal": return 15
    default: return 30 // mensual por defecto
  }
}

function printLoan(loan: Loan & { amount_to_repay?: number | null; clients?: ClientInfo | null }) {
  const amountToRepay = getAmountToRepay(loan)
  const perInstallment = loan.installments > 0 ? amountToRepay / loan.installments : amountToRepay

  const start = loan.start_date ? new Date(loan.start_date) : new Date()
  const days = intervalDaysFor(loan.loan_type)
  const scheduleRows = []
  for (let i = 0; i < loan.installments; i++) {
    const date = addDays(start, i * days)
    scheduleRows.push({ n: i + 1, date: formatDate(date), amount: perInstallment })
  }

  const w = window.open("", "_blank", "noopener,noreferrer,width=900,height=1200")
  if (!w) return

  const clientName = loan.clients
    ? `${loan.clients.first_name} ${loan.clients.last_name} (${loan.clients.client_code})`
    : loan.client_id

  const html = `
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Préstamo ${loan.loan_code}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { --fg: #111827; --muted: #6b7280; --border: #e5e7eb; --bg: #ffffff; }
    * { box-sizing: border-box; }
    body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica Neue, Arial, "Apple Color Emoji", "Segoe UI Emoji"; color: var(--fg); background: var(--bg); margin: 24px; }
    .header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 12px; }
    .brand { font-weight: 700; font-size: 18px; }
    .card { border: 1px solid var(--border); border-radius: 12px; padding: 16px; margin-bottom: 16px; }
    .title { font-size: 20px; font-weight: 700; margin: 0 0 4px 0; }
    .meta { color: var(--muted); margin: 0 0 12px 0; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 10px 8px; border-bottom: 1px solid var(--border); text-align: left; }
    th { background: #f8fafc; }
    .total { text-align: right; font-weight: 700; margin-top: 8px; }
    .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; }
    .label { color: var(--muted); font-size: 12px; }
    .value { font-weight: 600; }
    .logo { height: 36px; width: 36px; border-radius: 8px; object-fit: cover; }
    @page { margin: 16mm; }
  </style>
</head>
<body>
  <div class="header">
    <div class="brand">BM Microcredits</div>
    <img class="logo" src="${location.origin}/images/logo-bm.png" alt="BM Microcredits" />
  </div>

  <div class="card">
    <div class="title">Detalle de Préstamo</div>
    <p class="meta">Documento para impresión y/o envío. No incluye tasa de interés.</p>
    <div class="grid">
      <div>
        <div class="label">Código Préstamo</div>
        <div class="value">${loan.loan_code}</div>
      </div>
      <div>
        <div class="label">Cliente</div>
        <div class="value">${clientName}</div>
      </div>
      <div>
        <div class="label">Monto a devolver</div>
        <div class="value">$${amountToRepay.toFixed(2)}</div>
      </div>
      <div>
        <div class="label">Cantidad de cuotas</div>
        <div class="value">${loan.installments}</div>
      </div>
      <div>
        <div class="label">Tipo de préstamo</div>
        <div class="value">${loan.loan_type || "Mensual"}</div>
      </div>
      <div>
        <div class="label">Fecha de inicio</div>
        <div class="value">${loan.start_date ? formatDate(new Date(loan.start_date)) : formatDate(new Date())}</div>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="title">Cronograma de pagos</div>
    <table>
      <thead>
        <tr>
          <th>#</th>
          <th>Fecha</th>
          <th>Importe cuota</th>
        </tr>
      </thead>
      <tbody>
        ${scheduleRows.map(r => `<tr><td>${r.n}</td><td>${r.date}</td><td>$${(r.amount).toFixed(2)}</td></tr>`).join("")}
      </tbody>
    </table>
    <div class="total">Total a devolver: $${amountToRepay.toFixed(2)}</div>
  </div>

  <script>window.onload = () => window.print();</script>
</body>
</html>`
  w.document.open()
  w.document.write(html)
  w.document.close()
}

export default function LoansPage() {
  const [loans, setLoans] = useState<Loan[]>([])
  const [clients, setClients] = useState<ClientInfo[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [isNewLoanDialogOpen, setIsNewLoanDialogOpen] = useState(false)
  const router = useRouter()

  useEffect(() => {
    const fetchLoans = async () => {
      try {
        const response = await fetch("/api/loans")
        if (!response.ok) {
          throw new Error("Failed to fetch loans")
        }
        const data = await response.json()
        setLoans(data)
      } catch (error: any) {
        toast({ title: "Error", description: error.message, variant: "destructive" })
      }
    }

    fetchLoans()
  }, [])

  useEffect(() => {
    const fetchClients = async () => {
      try {
        const response = await fetch("/api/clients")
        if (!response.ok) {
          throw new Error("Failed to fetch clients")
        }
        const data = await response.json()
        setClients(data)
      } catch (error: any) {
        toast({ title: "Error", description: error.message, variant: "destructive" })
      }
    }

    fetchClients()
  }, [])

  const filteredLoans = loans.filter((loan) => {
    const clientName = loan.clients ? `${loan.clients.first_name} ${loan.clients.last_name}` : ""
    return (
      loan.loan_code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      clientName.toLowerCase().includes(searchTerm.toLowerCase())
    )
  })

  const handleLoanCreated = () => {
    setIsNewLoanDialogOpen(false)
    router.refresh()
  }

  const handleDeleteLoan = async (loanId: string) => {
    try {
      const response = await fetch(`/api/loans/${loanId}`, {
        method: "DELETE",
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => null)
        throw new Error(errorData?.detail || "Error al eliminar el préstamo.")
      }

      toast({ title: "Éxito", description: "Préstamo eliminado correctamente." })
      router.refresh()
    } catch (error: any) {
      toast({ title: "Error", description: error.message, variant: "destructive" })
    }
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-bold text-gray-50">Préstamos</h1>
        <Dialog open={isNewLoanDialogOpen} onOpenChange={setIsNewLoanDialogOpen}>
          <DialogTrigger asChild>
            <Button>Nuevo Préstamo</Button>
          </DialogTrigger>
          <DialogContent className="bg-gray-800 border-gray-700 text-gray-50">
            <DialogHeader>
              <DialogTitle>Crear Nuevo Préstamo</DialogTitle>
              <DialogDescription>
                Completa el formulario para crear un nuevo préstamo.
              </DialogDescription>
            </DialogHeader>
            <NewLoanForm clients={clients} onSuccess={handleLoanCreated} />
          </DialogContent>
        </Dialog>
      </div>

      <div className="mb-4">
        <Label htmlFor="search" className="block text-sm font-medium text-gray-300">
          Buscar Préstamo
        </Label>
        <Input
          type="text"
          id="search"
          placeholder="Buscar por código de préstamo o nombre del cliente..."
          className="mt-1 p-2 w-full bg-gray-700 border-gray-600 text-gray-100"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      <div className="rounded-md border">
        <Table>
          <TableCaption>Lista de préstamos registrados.</TableCaption>
          <TableHeader>
            <TableRow>
              <TableHead className="text-gray-300">Código</TableHead>
              <TableHead className="text-gray-300">Cliente</TableHead>
              <TableHead className="text-gray-300">Monto</TableHead>
              <TableHead className="text-gray-300">Cuotas</TableHead>
              <TableHead className="text-gray-300">Tipo de Préstamo</TableHead>
              <TableHead className="text-gray-300">Tasa Interés (calc.)</TableHead>
              <TableHead className="text-gray-300">Estado</TableHead>
              <TableHead className="text-right">Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLoans.map((loan) => (
              <TableRow key={loan.id}>
                <TableCell className="font-medium text-gray-300">{loan.loan_code}</TableCell>
                <TableCell className="text-gray-300">
                  {loan.clients ? `${loan.clients.first_name} ${loan.clients.last_name}` : "N/A"}
                </TableCell>
                <TableCell className="text-gray-300">${loan.amount.toFixed(2)}</TableCell>
                <TableCell className="text-gray-300">{loan.installments}</TableCell>
                <TableCell className="text-gray-300">{loan.loan_type}</TableCell>
                <TableCell className="text-gray-300">
                  {`${getCalculatedRate(loan).toFixed(2)}%`}
                </TableCell>
                <TableCell className="text-gray-300">{loan.status}</TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <span className="sr-only">Abrir menú</span>
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuLabel>Acciones</DropdownMenuLabel>
                      <DropdownMenuItem
                        onClick={() => console.log("Edit loan", loan.id)}
                        className="hover:bg-gray-600 focus:bg-gray-600 cursor-pointer"
                      >
                        <Edit className="mr-2 h-4 w-4" /> Editar
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => handleDeleteLoan(loan.id)}
                        className="hover:bg-gray-600 focus:bg-gray-600 cursor-pointer"
                      >
                        <Trash className="mr-2 h-4 w-4" /> Eliminar
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => printLoan(loan as any)}
                        className="hover:bg-gray-600 focus:bg-gray-600 cursor-pointer"
                      >
                        <Printer className="mr-2 h-4 w-4" />
                        Imprimir PDF
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}
\`\`\`
