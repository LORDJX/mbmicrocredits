// Script de Node.js para ejecutar la migraci√≥n de pr√©stamos existentes
// Este script puede ejecutarse desde la interfaz de v0

import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
})

async function migrateExistingLoans() {
  console.log("üöÄ Iniciando migraci√≥n de pr√©stamos existentes...")
  console.log("üìÖ Fecha:", new Date().toLocaleString())
  console.log("")

  try {
    // Obtener reporte pre-migraci√≥n
    console.log("üìä REPORTE PRE-MIGRACI√ìN:")
    const { data: preReport, error: preError } = await supabase.rpc("get_migration_report")

    if (preError) {
      console.error("‚ùå Error obteniendo reporte pre-migraci√≥n:", preError)
      return
    }

    if (preReport && preReport.length > 0) {
      const report = preReport[0]
      console.log(`- Total de pr√©stamos: ${report.total_loans}`)
      console.log(`- Pr√©stamos con cuotas: ${report.loans_with_installments}`)
      console.log(`- Pr√©stamos sin cuotas: ${report.loans_without_installments}`)
      console.log(`- Pr√©stamos con errores: ${report.loans_with_errors}`)
      console.log(`- Total cuotas existentes: ${report.total_installments_generated}`)
      console.log("")
    }

    // Ejecutar migraci√≥n
    console.log("‚öôÔ∏è EJECUTANDO MIGRACI√ìN:")
    const { data: migrationResults, error: migrationError } = await supabase.rpc(
      "migrate_existing_loans_to_installments",
    )

    if (migrationError) {
      console.error("‚ùå Error ejecutando migraci√≥n:", migrationError)
      return
    }

    // Procesar resultados
    let totalProcessed = 0
    let totalSuccess = 0
    let totalErrors = 0

    if (migrationResults && migrationResults.length > 0) {
      migrationResults.forEach((result: any) => {
        totalProcessed++

        if (result.status === "SUCCESS") {
          totalSuccess++
          console.log(`‚úÖ ${result.loan_code}: ${result.message}`)
        } else {
          totalErrors++
          console.log(`‚ùå ${result.loan_code}: ${result.message}`)
        }
      })
    } else {
      console.log("‚ÑπÔ∏è No se encontraron pr√©stamos para migrar")
    }

    console.log("")
    console.log("üìà RESUMEN DE MIGRACI√ìN:")
    console.log(`- Pr√©stamos procesados: ${totalProcessed}`)
    console.log(`- Migraciones exitosas: ${totalSuccess}`)
    console.log(`- Errores encontrados: ${totalErrors}`)
    console.log("")

    // Obtener reporte post-migraci√≥n
    console.log("üìä REPORTE POST-MIGRACI√ìN:")
    const { data: postReport, error: postError } = await supabase.rpc("get_migration_report")

    if (postError) {
      console.error("‚ùå Error obteniendo reporte post-migraci√≥n:", postError)
      return
    }

    if (postReport && postReport.length > 0) {
      const report = postReport[0]
      console.log(`- Total de pr√©stamos: ${report.total_loans}`)
      console.log(`- Pr√©stamos con cuotas: ${report.loans_with_installments}`)
      console.log(`- Pr√©stamos sin cuotas: ${report.loans_without_installments}`)
      console.log(`- Pr√©stamos con errores: ${report.loans_with_errors}`)
      console.log(`- Total cuotas generadas: ${report.total_installments_generated}`)
    }

    console.log("")
    console.log("üéâ MIGRACI√ìN COMPLETADA EXITOSAMENTE")

    // Verificar integridad de datos
    console.log("")
    console.log("üîç VERIFICANDO INTEGRIDAD DE DATOS:")

    const { data: installmentsCheck, error: checkError } = await supabase
      .from("installments_with_status")
      .select("status, count(*)", { count: "exact" })

    if (checkError) {
      console.error("‚ùå Error verificando integridad:", checkError)
    } else {
      console.log("‚úÖ Verificaci√≥n de integridad completada")
      console.log(`- Total de cuotas en el sistema: ${installmentsCheck?.length || 0}`)
    }
  } catch (error) {
    console.error("üí• Error inesperado durante la migraci√≥n:", error)
  }
}

// Ejecutar migraci√≥n
migrateExistingLoans()
